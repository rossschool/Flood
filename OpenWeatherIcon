import SwiftUI

struct WeatherView: View {
    var weather: ResponseBody
    
    var body: some View {
        ZStack(alignment:. leading) {
            VStack(alignment: .leading, spacing: 5) {
                Text(weather.name)
                    .bold().font(.title)
                
                Text("Today\(Date().formatted(.dateTime.month().day().hour().minute()))").fontWeight(.light)
            }
            
            .frame(maxWidth: .infinity, alignment: .leading)
            Spacer()
            
            VStack {
                HStack {
                    VStack(spacing: 20) {
                        Text(weather.weather[0].main)
                        
                    }
                    .frame(width:150, alignment:.leading)
                    Spacer()
                    
                    Text(weather.main.feels_like.roundDouble() +  "˚").font(.system(size:100)).fontWeight(.bold).padding()
                }
                Spacer().frame(height:80)
                /*
                AsyncImage(url:URL(string: "2546_R0lVIERBTiA1NjAtMDY.jpg")) { image in
                        image.resizable().aspectRatio(contentMode:.fit).frame(width:350)
                } placeholder: {
                    ProgressView()
                    Spacer()
                }
                */
                //.frame(maxWidth:.infinity)
            }
            .padding()
            .frame(maxWidth:.infinity, alignment: .leading)
            VStack {
                Spacer()
                VStack(alignment: .leading, spacing: 20) {
                    Text("Weather now").bold().padding(.bottom)
                    HStack {
                        WeatherRow(logo: "thermometer", name: "Min temp", value:(weather.main.temp_min.roundDouble() + "˚"))
                        Spacer()
                        WeatherRow(logo: "thermometer", name: "Max temp", value:(weather.main.temp_max.roundDouble() + "˚"))
                        
                    }
                    HStack {
                        WeatherRow(logo: "wind", name: "Wind Speed", value:(weather.wind.speed.roundDouble() + "˚"))
                        Spacer()
                        WeatherRow(logo: "humidity", name: "Humidity", value:(weather.main.humidity.roundDouble() + "%"))
                    }
                }
                .frame(maxWidth: .infinity, alignment: .leading)
                .padding()
                .padding(.bottom,20).foregroundColor(Color(hue: 0.505, saturation: 0.561, brightness: 0.984, opacity: 0.32))
                .background(.white)
                .cornerRadius(20, corners: [.topLeft, .topRight])
            }
            
            
            .edgesIgnoringSafeArea(.bottom)
            .background(Color(hue: 0.505, saturation: 0.561, brightness: 0.984, opacity: 0.32))
        }
    }
}

struct WeatherView_Previews: PreviewProvider {
    static var previews: some View {
        WeatherView(weather: previewWeather)
    }
}
